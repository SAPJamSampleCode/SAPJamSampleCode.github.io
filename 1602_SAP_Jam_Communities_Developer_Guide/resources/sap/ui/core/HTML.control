<?xml version="1.0" ?>
<control xmlns="http://www.sap.com/sap.ui.library.xsd">

  <name>HTML</name>

  <author>SAP SE</author>
  <documentation>Embeds standard HTML in a SAPUI5 control tree.
  
  Security Hint: By default, the HTML content (property 'content') is not sanitized and therefore open to XSS attacks. Applications that want to show user defined input in an HTML control, should either sanitize the content on their own or activate automatic sanitizing through the 'sanitizeContent' property.
  
  Although this control inherits the 'tooltip' feature from sap.ui.core.Element, it doesn't support it. Instead, the defined HTML content can contain a tooltip (title attribute).
  
  For further hints about usage restrictions for this control, see also the documentation of the 'content' property.</documentation>
  <baseType>sap.ui.core/Control</baseType>
  <properties>
    <property group="Misc" name="content" type="string" >
	<documentation>HTML content to be displayed, defined as a string. The content is converted to DOM nodes with a call to &lt;code&gt;new jQuery(content)&lt;/code&gt;, so any restrictions for the jQuery constructor apply to the content of the HTML control as well. 

Some of these restrictions (there might be others!) are:
&lt;ul&gt;
&lt;li&gt;the content must be enclosed in tags, pure text is not supported. &lt;/li&gt;
&lt;li&gt;if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.&lt;/li&gt;
&lt;/ul&gt;

Please consider to consult the jQuery documentation as well.

The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. setContent(&quot;&lt;div/&gt;&lt;div/&gt;&quot;)), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used. </documentation>
	<appData>
		<SecSink xmlns="http://schema.sap.com/ui5/extensions/fortify" kind="XSS">The content of the 'content' property is rendered 1:1 to allow the full flexibility of HTML in UI5 applications. 
		Applications therefore must ensure, that they don't set malicious content (e.g. derived from user input). UI5 does not provide an HTML validation function. 
		jQuery.sap.encodeHTML will encode any HTML relevant character, but this is in nearly all cases not what applications want here.</SecSink>
	</appData>
	</property>
    <property group="Misc" type="boolean" name="preferDOM" defaultValue="true">
    	<documentation>Whether existing DOM content is preferred over the given content string.

There are two scenarios where this flag is relevant (when set to true):
&lt;ul&gt;
&lt;li&gt;for the initial rendering: when an HTML control is added to an UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content&lt;/li&gt;
&lt;li&gt;any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content&lt;/li&gt;
&lt;/ul&gt;

As preserving the existing DOM is the most common use case of the HTML control, the default value is true.</documentation>
    </property>
    <property group="Misc" name="sanitizeContent" type="sap.ui.core/boolean" defaultValue="false">
    	<documentation>Whether to run the HTML sanitizer once the content (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.</documentation>
    </property>
  </properties>
  <events>
  	<event name="afterRendering">
  		<documentation>Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.

When the control doesn't have string content and no preserved DOM existed for this control, then this event will fire, but there won't be a DOM node for this control.
</documentation>
  		<parameters>
  			<parameter name="isPreservedDOM" type="boolean">
  				<documentation>Whether the current DOM of the control has been preserved (true) or not (e.g. rendered from content property or it is an empty HTML control).</documentation>
  			</parameter>
  		</parameters>
  	</event>
  </events>

</control>
